android studio  gradle-wrapper.properties 设置


腾讯镜像地址
https://mirrors.cloud.tencent.com/gradle/


阿里镜像地址
https://maven.aliyun.com/mvn/guide



配置阿里镜像(有用)
```
// 阿里云镜像
maven { url 'https://maven.aliyun.com/repository/public' }
maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
maven { url 'https://maven.aliyun.com/repository/google' }
```

配置腾讯镜像（有用）
```
// 腾讯云镜像
maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
maven { url 'https://mirrors.tencent.com/repository/maven/tencent-public/' }
```





配置gradle.properties
在~/.gradle/gradle.properties中添加：
```
systemProp.http.proxyHost=mirrors.aliyun.com
systemProp.https.proxyHost=mirrors.aliyun.com
org.gradle.daemon=true
org.gradle.caching=true
```


kotlin 初始化 init.gradle 设置（有用）
```
init.gradle.kts

// For Kotlin DSL
fun RepositoryHandler.enableMirror() {
    all {
        if (this is MavenArtifactRepository) {
            val originalUrl = url.toString().removeSuffix("/")
            urlMappings[originalUrl]?.let {
                logger.lifecycle("Repository[$url] is mirrored to $it")
                setUrl(it)
            }
        }
    }
}

val urlMappings = mapOf(
        "https://repo.maven.apache.org/maven2" to "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://dl.google.com/dl/android/maven2" to "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://plugins.gradle.org/m2" to "https://mirrors.tencent.com/nexus/repository/gradle-plugins/"
)

allprojects {
    buildscript {
        repositories.enableMirror()
    }
    repositories.enableMirror()
}

gradle.beforeSettings {
    pluginManagement.repositories.enableMirror()
    dependencyResolutionManagement.repositories.enableMirror()
}
```


groovy 初始化 init.gradle 设置（有用）
```
// For Groovy DSL
def enableMirror = { repositories ->
    repositories.all {
        if (it instanceof MavenArtifactRepository) {
            def originalUrl = it.url.toString().replaceFirst('/$', '')
            def mirroredUrl = urlMappings[originalUrl]
            if (mirroredUrl) {
                logger.lifecycle("Repository[${it.url}] is mirrored to $mirroredUrl")
                it.url = mirroredUrl
            }
        }
    }
}

def urlMappings = [
        "https://repo.maven.apache.org/maven2": "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://dl.google.com/dl/android/maven2": "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://plugins.gradle.org/m2": "https://mirrors.tencent.com/nexus/repository/gradle-plugins/"
]

allprojects {
    buildscript {
        repositories.enableMirror()
    }
    repositories.enableMirror()
}

gradle.beforeSettings { settings ->
    settings.pluginManagement.repositories.enableMirror()
    settings.dependencyResolutionManagement.repositories.enableMirror()
}
```


全局配置,阿里云镜像 init.gradle deepseek
```groovy
allprojects {
    repositories {
        def ALIYUN_REPOSITORY_URL = 'https://maven.aliyun.com/repository/public'
        def ALIYUN_JCENTER_URL = 'https://maven.aliyun.com/repository/public'
        def ALIYUN_GOOGLE_URL = 'https://maven.aliyun.com/repository/google'

        all { ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository) {
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL."
                    remove repo
                }
                if (url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL."
                    remove repo
                }
                if (url.startsWith('https://dl.google.com/dl/android/maven2/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_GOOGLE_URL."
                    remove repo
                }
            }
        }

        maven { url ALIYUN_REPOSITORY_URL }
        maven { url ALIYUN_JCENTER_URL }
        maven { url ALIYUN_GOOGLE_URL }
    }
}
```

全局配置,腾讯云镜像 init.gradle deepseek 
```groovy
allprojects {
    repositories {
        def TENCENT_PUBLIC_URL = 'https://mirrors.tencent.com/nexus/repository/maven-public/'
        def TENCENT_GOOGLE_URL = 'https://mirrors.tencent.com/repository/maven/tencent-public/'

        all { ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository) {
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $TENCENT_PUBLIC_URL."
                    remove repo
                }
                if (url.startsWith('https://dl.google.com/dl/android/maven2/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $TENCENT_GOOGLE_URL."
                    remove repo
                }
            }
        }

        maven { url TENCENT_PUBLIC_URL }
        maven { url TENCENT_GOOGLE_URL }
    }
}
```

其他设置 v1
```
buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenCentral()
    }
}
allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    }
}
```

其他设置 v2
```
// For Kotlin DSL
fun RepositoryHandler.enableMirror() {
    all {
        if (this is MavenArtifactRepository) {
            val originalUrl = url.toString().removeSuffix("/")
            urlMappings[originalUrl]?.let {
                logger.lifecycle("Repository[$url] is mirrored to $it")
                setUrl(it)
            }
        }
    }
}

val urlMappings = mapOf(
        "https://repo.maven.apache.org/maven2" to "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://dl.google.com/dl/android/maven2" to "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://plugins.gradle.org/m2" to "https://mirrors.tencent.com/nexus/repository/gradle-plugins/"
        "https://services.gradle.org/distributions" to "https://mirrors.cloud.tencent.com/gradle/"
)

allprojects {
    buildscript {
        repositories.enableMirror()
    }
    repositories.enableMirror()
}

gradle.beforeSettings {
    pluginManagement.repositories.enableMirror()
    dependencyResolutionManagement.repositories.enableMirror()
}
```

其他设置  v3
```
// For Groovy DSL
def enableMirror = { repositories ->
    repositories.all {
        if (it instanceof MavenArtifactRepository) {
            def originalUrl = it.url.toString().replaceFirst('/$', '')
            def mirroredUrl = urlMappings[originalUrl]
            if (mirroredUrl) {
                logger.lifecycle("Repository[${it.url}] is mirrored to $mirroredUrl")
                it.url = mirroredUrl
            }
        }
    }
}

def urlMappings = [
        "https://repo.maven.apache.org/maven2"     : "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://dl.google.com/dl/android/maven2"  : "https://mirrors.tencent.com/nexus/repository/maven-public/",
        "https://plugins.gradle.org/m2"            : "https://mirrors.tencent.com/nexus/repository/gradle-plugins/",
        "https://services.gradle.org/distributions": "https://mirrors.cloud.tencent.com/gradle/"
]

// "https://mirrors.cloud.tencent.com/gradle/"

allprojects {
    buildscript {
        repositories.enableMirror()
    }
    repositories.enableMirror()
}

gradle.beforeSettings { settings ->
    settings.pluginManagement.repositories.enableMirror()
    settings.dependencyResolutionManagement.repositories.enableMirror()
}
```

其他设置 v4
```
allprojects {
    repositories {
        def ALIYUN_REPOSITORY_URL = 'https://maven.aliyun.com/repository/public'
        def ALIYUN_JCENTER_URL = 'https://maven.aliyun.com/repository/public'
        def ALIYUN_GOOGLE_URL = 'https://maven.aliyun.com/repository/google'
        def ALIYUN_GRADLE_PLUGIN_URL = 'https://maven.aliyun.com/repository/gradle-plugin'

        all { ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository) {
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL."
                    remove repo
                }
                if (url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL."
                    remove repo
                }
                if (url.startsWith('https://dl.google.com/dl/android/maven2/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_GOOGLE_URL."
                    remove repo
                }
                if (url.startsWith('https://plugins.gradle.org/m2/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_GRADLE_PLUGIN_URL."
                    remove repo
                }
                if (  url.contains('https://services.gradle.org/distributions')) {
                    project.logger.lifecycle "替换 Gradle 仓库地址为阿里云镜像"
                    remove repo
                }
            }
        }

        maven { url ALIYUN_REPOSITORY_URL }
        maven { url ALIYUN_JCENTER_URL }
        maven { url ALIYUN_GOOGLE_URL }
        maven { url ALIYUN_GRADLE_PLUGIN_URL }
        maven { url 'https://mirrors.cloud.tencent.com/gradle/' }
    }
}
```

其他设置  v5
```
// =================== 国内镜像全局配置 ===================
def MIRRORS = [
        // Gradle 发行版镜像（任选其一）
        GRADLE_DIST: "https://mirrors.cloud.tencent.com/gradle",
        // GRADLE_DIST: "https://mirrors.aliyun.com/gradle",
        // GRADLE_DIST: "https://repo.huaweicloud.com/gradle/distributions",

        // Maven 仓库镜像
        MAVEN_PUBLIC: "https://maven.aliyun.com/repository/public",
        MAVEN_GOOGLE: "https://maven.aliyun.com/repository/google",
        MAVEN_GRADLE_PLUGIN: "https://maven.aliyun.com/repository/gradle-plugin",
        MAVEN_JCENTER: "https://maven.aliyun.com/repository/jcenter",

        // 备用镜像（当主镜像不可用时）
        TENCENT_MAVEN: "https://mirrors.cloud.tencent.com/nexus/repository/maven-public",
        HUAWEI_MAVEN: "https://repo.huaweicloud.com/repository/maven"
]

// =================== 仓库替换逻辑 ===================
// 1. 替换所有项目的仓库地址
allprojects {
    buildscript {
        repositories {
            all { repo ->
                def originalUrl = repo.url.toString()
                // 需要替换的官方仓库列表
                def replaceTargets = [
                        "https://repo1.maven.org/maven2",
                        "https://jcenter.bintray.com",
                        "https://dl.google.com/dl/android/maven2",
                        "https://plugins.gradle.org/m2",
                        "https://services.gradle.org"
                ]

                if (replaceTargets.any { originalUrl.contains(it) }) {
                    remove(repo)
                    println ">>> 已移除官方仓库: $originalUrl"
                }
            }
            // 添加国内镜像仓库（优先级从高到低）
            maven { url MIRRORS.MAVEN_PUBLIC }
            maven { url MIRRORS.MAVEN_GOOGLE }
            maven { url MIRRORS.MAVEN_GRADLE_PLUGIN }
            maven { url MIRRORS.TENCENT_MAVEN }
        }
    }

    repositories {
        all { repo ->
            def originalUrl = repo.url.toString()
            if (originalUrl.contains("repo1.maven.org") ||
                    originalUrl.contains("jcenter.bintray.com") ||
                    originalUrl.contains("dl.google.com") ||
                    originalUrl.contains("plugins.gradle.org")) {
                remove(repo)
                println ">>> 已移除仓库: $originalUrl"
            }
        }
        // 添加国内镜像
        maven { url MIRRORS.MAVEN_PUBLIC }
        maven { url MIRRORS.MAVEN_GOOGLE }
        maven { url MIRRORS.MAVEN_JCENTER }
    }
}

// 2. 替换 Gradle Wrapper 下载地址
gradle.projectsLoaded {
    rootProject ->
        def wrapperFile = new File(rootProject.rootDir, "gradle/wrapper/gradle-wrapper.properties")
        if (wrapperFile.exists()) {
            def text = wrapperFile.getText("UTF-8")
            if (text.contains("services.gradle.org")) {
                def newText = text.replaceAll(
                        "https\\://services\\.gradle\\.org/distributions/gradle-(.*?)-([a-z]+)\\.zip",
                        "${MIRRORS.GRADLE_DIST}/gradle-\$1-\$2.zip"
                )
                wrapperFile.write(newText, "UTF-8")
                println ">>> 已替换 Gradle Wrapper 地址: ${MIRRORS.GRADLE_DIST}"
            }
        }
}

// 3. 替换插件管理仓库
settingsEvaluated { settings ->
    settings.pluginManagement {
        repositories {
            all { repo ->
                def originalUrl = repo.url.toString()
                if (originalUrl.contains("plugins.gradle.org") ||
                        originalUrl.contains("gradle-plugin")) {
                    remove(repo)
                    println ">>> 已移除插件仓库: $originalUrl"
                }
            }
            maven { url MIRRORS.MAVEN_GRADLE_PLUGIN }
        }
    }
}

// =================== 网络优化配置 ===================
// 解决 Windows 下 SSL 证书问题
System.setProperty("javax.net.ssl.trustStore", "C:/Program Files/Java/jdk-17/lib/security/cacerts")
System.setProperty("javax.net.ssl.trustStorePassword", "changeit")

// 并行下载优化
startParameter {
    parallelProjectExecutionEnabled = true
    configureOnDemand = true
}

println "=================================================================="
println " 已启用全局 Gradle 加速配置"
println " 镜像源: ${MIRRORS.MAVEN_PUBLIC}"
println " Gradle 发行版: ${MIRRORS.GRADLE_DIST}"
println "=================================================================="
```

其他设置  v6
```
// 自动替换所有项目的 gradle-wrapper.properties
gradle.projectsLoaded {
    rootProject ->
        def wrapperFile = new File(rootProject.rootDir, "gradle/wrapper/gradle-wrapper.properties")
        if (wrapperFile.exists()) {
            def text = wrapperFile.getText("UTF-8")
            if (text.contains("distributionUrl")) {
                def newText = text.replaceAll(
                        "distributionUrl=https\\://\\S+/gradle-(\\d+\\.\\d+\\.\\d+)-bin\\.zip",
                        "distributionUrl=https://mirrors.cloud.tencent.com/gradle/gradle-\$1-bin.zip"
                )
                wrapperFile.write(newText, "UTF-8")
                println "全局替换 Gradle 下载地址为阿里云镜像"
            }
        }
}
```
